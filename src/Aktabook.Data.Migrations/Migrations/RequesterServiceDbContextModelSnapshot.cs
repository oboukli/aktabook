// <auto-generated />
using System;
using Aktabook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aktabook.Data.Migrations.Migrations
{
    [DbContext(typeof(RequesterServiceDbContext))]
    partial class RequesterServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Aktabook.Domain.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuthorId");

                    b.HasIndex("Name");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("Aktabook.Domain.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("Aktabook.Domain.Models.BookInfoRequest", b =>
                {
                    b.Property<Guid>("BookInfoRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookInfoRequestId");

                    b.HasIndex("Isbn");

                    b.ToTable("BookInfoRequest", (string)null);
                });

            modelBuilder.Entity("Aktabook.Domain.Models.BookInfoRequestLogEntry", b =>
                {
                    b.Property<Guid>("BookInfoRequestLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookInfoRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookInfoRequestLogEntryId");

                    b.HasIndex("BookInfoRequestId");

                    b.HasIndex("Status");

                    b.ToTable("BookInfoRequestLogEntry", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BooksBookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsAuthorId", "BooksBookId");

                    b.HasIndex("BooksBookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("Aktabook.Domain.Models.BookInfoRequestLogEntry", b =>
                {
                    b.HasOne("Aktabook.Domain.Models.BookInfoRequest", "BookInfoRequest")
                        .WithMany("BookInfoRequestLogEntries")
                        .HasForeignKey("BookInfoRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookInfoRequest");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Aktabook.Domain.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aktabook.Domain.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aktabook.Domain.Models.BookInfoRequest", b =>
                {
                    b.Navigation("BookInfoRequestLogEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
